//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:2.0.50727.1433
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace VP {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NewDataSet : global::System.Data.DataSet {
        
        private itemDataTable tableitem;
        
        private _caseDataTable table_case;
        
        private profileDataTable tableprofile;
        
        private personDataTable tableperson;
        
        private insuranceDataTable tableinsurance;
        
        private studyDataTable tablestudy;
        
        private diseasesDataTable tablediseases;
        
        private continous_prescriptionDataTable tablecontinous_prescription;
        
        private ordersDataTable tableorders;
        
        private global::System.Data.DataRelation relationdiseases_item;
        
        private global::System.Data.DataRelation relationorders_item;
        
        private global::System.Data.DataRelation relationcase_profile;
        
        private global::System.Data.DataRelation relationprofile_person;
        
        private global::System.Data.DataRelation relationcase_insurance;
        
        private global::System.Data.DataRelation relationcase_study;
        
        private global::System.Data.DataRelation relationstudy_diseases;
        
        private global::System.Data.DataRelation relationcase_continous_prescription;
        
        private global::System.Data.DataRelation relationcase_orders;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["item"] != null)) {
                    base.Tables.Add(new itemDataTable(ds.Tables["item"]));
                }
                if ((ds.Tables["case"] != null)) {
                    base.Tables.Add(new _caseDataTable(ds.Tables["case"]));
                }
                if ((ds.Tables["profile"] != null)) {
                    base.Tables.Add(new profileDataTable(ds.Tables["profile"]));
                }
                if ((ds.Tables["person"] != null)) {
                    base.Tables.Add(new personDataTable(ds.Tables["person"]));
                }
                if ((ds.Tables["insurance"] != null)) {
                    base.Tables.Add(new insuranceDataTable(ds.Tables["insurance"]));
                }
                if ((ds.Tables["study"] != null)) {
                    base.Tables.Add(new studyDataTable(ds.Tables["study"]));
                }
                if ((ds.Tables["diseases"] != null)) {
                    base.Tables.Add(new diseasesDataTable(ds.Tables["diseases"]));
                }
                if ((ds.Tables["continous_prescription"] != null)) {
                    base.Tables.Add(new continous_prescriptionDataTable(ds.Tables["continous_prescription"]));
                }
                if ((ds.Tables["orders"] != null)) {
                    base.Tables.Add(new ordersDataTable(ds.Tables["orders"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public itemDataTable item {
            get {
                return this.tableitem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _caseDataTable _case {
            get {
                return this.table_case;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public profileDataTable profile {
            get {
                return this.tableprofile;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public personDataTable person {
            get {
                return this.tableperson;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public insuranceDataTable insurance {
            get {
                return this.tableinsurance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public studyDataTable study {
            get {
                return this.tablestudy;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public diseasesDataTable diseases {
            get {
                return this.tablediseases;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public continous_prescriptionDataTable continous_prescription {
            get {
                return this.tablecontinous_prescription;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ordersDataTable orders {
            get {
                return this.tableorders;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["item"] != null)) {
                    base.Tables.Add(new itemDataTable(ds.Tables["item"]));
                }
                if ((ds.Tables["case"] != null)) {
                    base.Tables.Add(new _caseDataTable(ds.Tables["case"]));
                }
                if ((ds.Tables["profile"] != null)) {
                    base.Tables.Add(new profileDataTable(ds.Tables["profile"]));
                }
                if ((ds.Tables["person"] != null)) {
                    base.Tables.Add(new personDataTable(ds.Tables["person"]));
                }
                if ((ds.Tables["insurance"] != null)) {
                    base.Tables.Add(new insuranceDataTable(ds.Tables["insurance"]));
                }
                if ((ds.Tables["study"] != null)) {
                    base.Tables.Add(new studyDataTable(ds.Tables["study"]));
                }
                if ((ds.Tables["diseases"] != null)) {
                    base.Tables.Add(new diseasesDataTable(ds.Tables["diseases"]));
                }
                if ((ds.Tables["continous_prescription"] != null)) {
                    base.Tables.Add(new continous_prescriptionDataTable(ds.Tables["continous_prescription"]));
                }
                if ((ds.Tables["orders"] != null)) {
                    base.Tables.Add(new ordersDataTable(ds.Tables["orders"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableitem = ((itemDataTable)(base.Tables["item"]));
            if ((initTable == true)) {
                if ((this.tableitem != null)) {
                    this.tableitem.InitVars();
                }
            }
            this.table_case = ((_caseDataTable)(base.Tables["case"]));
            if ((initTable == true)) {
                if ((this.table_case != null)) {
                    this.table_case.InitVars();
                }
            }
            this.tableprofile = ((profileDataTable)(base.Tables["profile"]));
            if ((initTable == true)) {
                if ((this.tableprofile != null)) {
                    this.tableprofile.InitVars();
                }
            }
            this.tableperson = ((personDataTable)(base.Tables["person"]));
            if ((initTable == true)) {
                if ((this.tableperson != null)) {
                    this.tableperson.InitVars();
                }
            }
            this.tableinsurance = ((insuranceDataTable)(base.Tables["insurance"]));
            if ((initTable == true)) {
                if ((this.tableinsurance != null)) {
                    this.tableinsurance.InitVars();
                }
            }
            this.tablestudy = ((studyDataTable)(base.Tables["study"]));
            if ((initTable == true)) {
                if ((this.tablestudy != null)) {
                    this.tablestudy.InitVars();
                }
            }
            this.tablediseases = ((diseasesDataTable)(base.Tables["diseases"]));
            if ((initTable == true)) {
                if ((this.tablediseases != null)) {
                    this.tablediseases.InitVars();
                }
            }
            this.tablecontinous_prescription = ((continous_prescriptionDataTable)(base.Tables["continous_prescription"]));
            if ((initTable == true)) {
                if ((this.tablecontinous_prescription != null)) {
                    this.tablecontinous_prescription.InitVars();
                }
            }
            this.tableorders = ((ordersDataTable)(base.Tables["orders"]));
            if ((initTable == true)) {
                if ((this.tableorders != null)) {
                    this.tableorders.InitVars();
                }
            }
            this.relationdiseases_item = this.Relations["diseases_item"];
            this.relationorders_item = this.Relations["orders_item"];
            this.relationcase_profile = this.Relations["case_profile"];
            this.relationprofile_person = this.Relations["profile_person"];
            this.relationcase_insurance = this.Relations["case_insurance"];
            this.relationcase_study = this.Relations["case_study"];
            this.relationstudy_diseases = this.Relations["study_diseases"];
            this.relationcase_continous_prescription = this.Relations["case_continous_prescription"];
            this.relationcase_orders = this.Relations["case_orders"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableitem = new itemDataTable();
            base.Tables.Add(this.tableitem);
            this.table_case = new _caseDataTable();
            base.Tables.Add(this.table_case);
            this.tableprofile = new profileDataTable();
            base.Tables.Add(this.tableprofile);
            this.tableperson = new personDataTable();
            base.Tables.Add(this.tableperson);
            this.tableinsurance = new insuranceDataTable();
            base.Tables.Add(this.tableinsurance);
            this.tablestudy = new studyDataTable();
            base.Tables.Add(this.tablestudy);
            this.tablediseases = new diseasesDataTable();
            base.Tables.Add(this.tablediseases);
            this.tablecontinous_prescription = new continous_prescriptionDataTable();
            base.Tables.Add(this.tablecontinous_prescription);
            this.tableorders = new ordersDataTable();
            base.Tables.Add(this.tableorders);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("diseases_item", new global::System.Data.DataColumn[] {
                        this.tablediseases.diseases_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableitem.diseases_IdColumn});
            this.tableitem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("orders_item", new global::System.Data.DataColumn[] {
                        this.tableorders.orders_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableitem.orders_IdColumn});
            this.tableitem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("case_profile", new global::System.Data.DataColumn[] {
                        this.table_case.case_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprofile.case_IdColumn});
            this.tableprofile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("profile_person", new global::System.Data.DataColumn[] {
                        this.tableprofile.profile_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableperson.profile_IdColumn});
            this.tableperson.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("case_insurance", new global::System.Data.DataColumn[] {
                        this.table_case.case_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableinsurance.case_IdColumn});
            this.tableinsurance.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("case_study", new global::System.Data.DataColumn[] {
                        this.table_case.case_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablestudy.case_IdColumn});
            this.tablestudy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("study_diseases", new global::System.Data.DataColumn[] {
                        this.tablestudy.study_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablediseases.study_IdColumn});
            this.tablediseases.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("case_continous_prescription", new global::System.Data.DataColumn[] {
                        this.table_case.case_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecontinous_prescription.case_IdColumn});
            this.tablecontinous_prescription.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("case_orders", new global::System.Data.DataColumn[] {
                        this.table_case.case_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableorders.case_IdColumn});
            this.tableorders.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationdiseases_item = new global::System.Data.DataRelation("diseases_item", new global::System.Data.DataColumn[] {
                        this.tablediseases.diseases_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableitem.diseases_IdColumn}, false);
            this.relationdiseases_item.Nested = true;
            this.Relations.Add(this.relationdiseases_item);
            this.relationorders_item = new global::System.Data.DataRelation("orders_item", new global::System.Data.DataColumn[] {
                        this.tableorders.orders_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableitem.orders_IdColumn}, false);
            this.relationorders_item.Nested = true;
            this.Relations.Add(this.relationorders_item);
            this.relationcase_profile = new global::System.Data.DataRelation("case_profile", new global::System.Data.DataColumn[] {
                        this.table_case.case_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprofile.case_IdColumn}, false);
            this.relationcase_profile.Nested = true;
            this.Relations.Add(this.relationcase_profile);
            this.relationprofile_person = new global::System.Data.DataRelation("profile_person", new global::System.Data.DataColumn[] {
                        this.tableprofile.profile_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableperson.profile_IdColumn}, false);
            this.relationprofile_person.Nested = true;
            this.Relations.Add(this.relationprofile_person);
            this.relationcase_insurance = new global::System.Data.DataRelation("case_insurance", new global::System.Data.DataColumn[] {
                        this.table_case.case_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableinsurance.case_IdColumn}, false);
            this.relationcase_insurance.Nested = true;
            this.Relations.Add(this.relationcase_insurance);
            this.relationcase_study = new global::System.Data.DataRelation("case_study", new global::System.Data.DataColumn[] {
                        this.table_case.case_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablestudy.case_IdColumn}, false);
            this.relationcase_study.Nested = true;
            this.Relations.Add(this.relationcase_study);
            this.relationstudy_diseases = new global::System.Data.DataRelation("study_diseases", new global::System.Data.DataColumn[] {
                        this.tablestudy.study_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablediseases.study_IdColumn}, false);
            this.relationstudy_diseases.Nested = true;
            this.Relations.Add(this.relationstudy_diseases);
            this.relationcase_continous_prescription = new global::System.Data.DataRelation("case_continous_prescription", new global::System.Data.DataColumn[] {
                        this.table_case.case_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecontinous_prescription.case_IdColumn}, false);
            this.relationcase_continous_prescription.Nested = true;
            this.Relations.Add(this.relationcase_continous_prescription);
            this.relationcase_orders = new global::System.Data.DataRelation("case_orders", new global::System.Data.DataColumn[] {
                        this.table_case.case_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableorders.case_IdColumn}, false);
            this.relationcase_orders.Nested = true;
            this.Relations.Add(this.relationcase_orders);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeitem() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_case() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeprofile() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeperson() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeinsurance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializestudy() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializediseases() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecontinous_prescription() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeorders() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void itemRowChangeEventHandler(object sender, itemRowChangeEvent e);
        
        public delegate void _caseRowChangeEventHandler(object sender, _caseRowChangeEvent e);
        
        public delegate void profileRowChangeEventHandler(object sender, profileRowChangeEvent e);
        
        public delegate void personRowChangeEventHandler(object sender, personRowChangeEvent e);
        
        public delegate void insuranceRowChangeEventHandler(object sender, insuranceRowChangeEvent e);
        
        public delegate void studyRowChangeEventHandler(object sender, studyRowChangeEvent e);
        
        public delegate void diseasesRowChangeEventHandler(object sender, diseasesRowChangeEvent e);
        
        public delegate void continous_prescriptionRowChangeEventHandler(object sender, continous_prescriptionRowChangeEvent e);
        
        public delegate void ordersRowChangeEventHandler(object sender, ordersRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class itemDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncode;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columndesc;
            
            private global::System.Data.DataColumn columnremark;
            
            private global::System.Data.DataColumn columnlocal_code;
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columndivided_dose;
            
            private global::System.Data.DataColumn columndaily_dose;
            
            private global::System.Data.DataColumn columntotal_dose;
            
            private global::System.Data.DataColumn columnfreq;
            
            private global::System.Data.DataColumn columndays;
            
            private global::System.Data.DataColumn columnway;
            
            private global::System.Data.DataColumn columnprice;
            
            private global::System.Data.DataColumn columnmultiplier;
            
            private global::System.Data.DataColumn columnmemo;
            
            private global::System.Data.DataColumn columndum;
            
            private global::System.Data.DataColumn columndnop;
            
            private global::System.Data.DataColumn columndtp1;
            
            private global::System.Data.DataColumn columndiseases_Id;
            
            private global::System.Data.DataColumn columnorders_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemDataTable() {
                this.TableName = "item";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal itemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected itemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn codeColumn {
                get {
                    return this.columncode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descColumn {
                get {
                    return this.columndesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn remarkColumn {
                get {
                    return this.columnremark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn local_codeColumn {
                get {
                    return this.columnlocal_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn divided_doseColumn {
                get {
                    return this.columndivided_dose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn daily_doseColumn {
                get {
                    return this.columndaily_dose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn total_doseColumn {
                get {
                    return this.columntotal_dose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn freqColumn {
                get {
                    return this.columnfreq;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn daysColumn {
                get {
                    return this.columndays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn wayColumn {
                get {
                    return this.columnway;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn priceColumn {
                get {
                    return this.columnprice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn multiplierColumn {
                get {
                    return this.columnmultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memoColumn {
                get {
                    return this.columnmemo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dumColumn {
                get {
                    return this.columndum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dnopColumn {
                get {
                    return this.columndnop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dtp1Column {
                get {
                    return this.columndtp1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diseases_IdColumn {
                get {
                    return this.columndiseases_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn orders_IdColumn {
                get {
                    return this.columnorders_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow this[int index] {
                get {
                    return ((itemRow)(this.Rows[index]));
                }
            }
            
            public event itemRowChangeEventHandler itemRowChanging;
            
            public event itemRowChangeEventHandler itemRowChanged;
            
            public event itemRowChangeEventHandler itemRowDeleting;
            
            public event itemRowChangeEventHandler itemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdditemRow(itemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow AdditemRow(
                        string code, 
                        string type, 
                        string desc, 
                        string remark, 
                        string local_code, 
                        string id, 
                        string divided_dose, 
                        string daily_dose, 
                        string total_dose, 
                        string freq, 
                        string days, 
                        string way, 
                        string price, 
                        string multiplier, 
                        string memo, 
                        string dum, 
                        string dnop, 
                        string dtp1, 
                        diseasesRow parentdiseasesRowBydiseases_item, 
                        ordersRow parentordersRowByorders_item) {
                itemRow rowitemRow = ((itemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        code,
                        type,
                        desc,
                        remark,
                        local_code,
                        id,
                        divided_dose,
                        daily_dose,
                        total_dose,
                        freq,
                        days,
                        way,
                        price,
                        multiplier,
                        memo,
                        dum,
                        dnop,
                        dtp1,
                        null,
                        null};
                if ((parentdiseasesRowBydiseases_item != null)) {
                    columnValuesArray[18] = parentdiseasesRowBydiseases_item[0];
                }
                if ((parentordersRowByorders_item != null)) {
                    columnValuesArray[19] = parentordersRowByorders_item[3];
                }
                rowitemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowitemRow);
                return rowitemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                itemDataTable cln = ((itemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new itemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncode = base.Columns["code"];
                this.columntype = base.Columns["type"];
                this.columndesc = base.Columns["desc"];
                this.columnremark = base.Columns["remark"];
                this.columnlocal_code = base.Columns["local_code"];
                this.columnid = base.Columns["id"];
                this.columndivided_dose = base.Columns["divided_dose"];
                this.columndaily_dose = base.Columns["daily_dose"];
                this.columntotal_dose = base.Columns["total_dose"];
                this.columnfreq = base.Columns["freq"];
                this.columndays = base.Columns["days"];
                this.columnway = base.Columns["way"];
                this.columnprice = base.Columns["price"];
                this.columnmultiplier = base.Columns["multiplier"];
                this.columnmemo = base.Columns["memo"];
                this.columndum = base.Columns["dum"];
                this.columndnop = base.Columns["dnop"];
                this.columndtp1 = base.Columns["dtp1"];
                this.columndiseases_Id = base.Columns["diseases_Id"];
                this.columnorders_Id = base.Columns["orders_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncode = new global::System.Data.DataColumn("code", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncode);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columndesc = new global::System.Data.DataColumn("desc", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndesc);
                this.columnremark = new global::System.Data.DataColumn("remark", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnremark);
                this.columnlocal_code = new global::System.Data.DataColumn("local_code", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlocal_code);
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columndivided_dose = new global::System.Data.DataColumn("divided_dose", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndivided_dose);
                this.columndaily_dose = new global::System.Data.DataColumn("daily_dose", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndaily_dose);
                this.columntotal_dose = new global::System.Data.DataColumn("total_dose", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntotal_dose);
                this.columnfreq = new global::System.Data.DataColumn("freq", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnfreq);
                this.columndays = new global::System.Data.DataColumn("days", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndays);
                this.columnway = new global::System.Data.DataColumn("way", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnway);
                this.columnprice = new global::System.Data.DataColumn("price", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnprice);
                this.columnmultiplier = new global::System.Data.DataColumn("multiplier", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmultiplier);
                this.columnmemo = new global::System.Data.DataColumn("memo", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmemo);
                this.columndum = new global::System.Data.DataColumn("dum", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndum);
                this.columndnop = new global::System.Data.DataColumn("dnop", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndnop);
                this.columndtp1 = new global::System.Data.DataColumn("dtp1", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndtp1);
                this.columndiseases_Id = new global::System.Data.DataColumn("diseases_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndiseases_Id);
                this.columnorders_Id = new global::System.Data.DataColumn("orders_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnorders_Id);
                this.columncode.Namespace = "";
                this.columntype.Namespace = "";
                this.columndesc.Namespace = "";
                this.columnremark.Namespace = "";
                this.columnlocal_code.Namespace = "";
                this.columnid.Namespace = "";
                this.columndivided_dose.Namespace = "";
                this.columndaily_dose.Namespace = "";
                this.columntotal_dose.Namespace = "";
                this.columnfreq.Namespace = "";
                this.columndays.Namespace = "";
                this.columnway.Namespace = "";
                this.columnprice.Namespace = "";
                this.columnmultiplier.Namespace = "";
                this.columnmemo.Namespace = "";
                this.columndum.Namespace = "";
                this.columndnop.Namespace = "";
                this.columndtp1.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow NewitemRow() {
                return ((itemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new itemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(itemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.itemRowChanged != null)) {
                    this.itemRowChanged(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.itemRowChanging != null)) {
                    this.itemRowChanging(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.itemRowDeleted != null)) {
                    this.itemRowDeleted(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.itemRowDeleting != null)) {
                    this.itemRowDeleting(this, new itemRowChangeEvent(((itemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveitemRow(itemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "itemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _caseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnfrom;
            
            private global::System.Data.DataColumn columnto;
            
            private global::System.Data.DataColumn columnlocal_id;
            
            private global::System.Data.DataColumn columndate;
            
            private global::System.Data.DataColumn columntime;
            
            private global::System.Data.DataColumn columnapp;
            
            private global::System.Data.DataColumn columnrequest_method;
            
            private global::System.Data.DataColumn columncase_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _caseDataTable() {
                this.TableName = "case";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _caseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _caseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fromColumn {
                get {
                    return this.columnfrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn toColumn {
                get {
                    return this.columnto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn local_idColumn {
                get {
                    return this.columnlocal_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn appColumn {
                get {
                    return this.columnapp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn request_methodColumn {
                get {
                    return this.columnrequest_method;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn case_IdColumn {
                get {
                    return this.columncase_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _caseRow this[int index] {
                get {
                    return ((_caseRow)(this.Rows[index]));
                }
            }
            
            public event _caseRowChangeEventHandler _caseRowChanging;
            
            public event _caseRowChangeEventHandler _caseRowChanged;
            
            public event _caseRowChangeEventHandler _caseRowDeleting;
            
            public event _caseRowChangeEventHandler _caseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_caseRow(_caseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _caseRow Add_caseRow(string from, string to, string local_id, string date, string time, string app, string request_method) {
                _caseRow row_caseRow = ((_caseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        from,
                        to,
                        local_id,
                        date,
                        time,
                        app,
                        request_method,
                        null};
                row_caseRow.ItemArray = columnValuesArray;
                this.Rows.Add(row_caseRow);
                return row_caseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                _caseDataTable cln = ((_caseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new _caseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfrom = base.Columns["from"];
                this.columnto = base.Columns["to"];
                this.columnlocal_id = base.Columns["local_id"];
                this.columndate = base.Columns["date"];
                this.columntime = base.Columns["time"];
                this.columnapp = base.Columns["app"];
                this.columnrequest_method = base.Columns["request_method"];
                this.columncase_Id = base.Columns["case_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfrom = new global::System.Data.DataColumn("from", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnfrom);
                this.columnto = new global::System.Data.DataColumn("to", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnto);
                this.columnlocal_id = new global::System.Data.DataColumn("local_id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlocal_id);
                this.columndate = new global::System.Data.DataColumn("date", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndate);
                this.columntime = new global::System.Data.DataColumn("time", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntime);
                this.columnapp = new global::System.Data.DataColumn("app", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnapp);
                this.columnrequest_method = new global::System.Data.DataColumn("request_method", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnrequest_method);
                this.columncase_Id = new global::System.Data.DataColumn("case_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncase_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columncase_Id}, true));
                this.columnfrom.Namespace = "";
                this.columnto.Namespace = "";
                this.columnlocal_id.Namespace = "";
                this.columndate.Namespace = "";
                this.columntime.Namespace = "";
                this.columnapp.Namespace = "";
                this.columnrequest_method.Namespace = "";
                this.columncase_Id.AutoIncrement = true;
                this.columncase_Id.AllowDBNull = false;
                this.columncase_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _caseRow New_caseRow() {
                return ((_caseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new _caseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(_caseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._caseRowChanged != null)) {
                    this._caseRowChanged(this, new _caseRowChangeEvent(((_caseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._caseRowChanging != null)) {
                    this._caseRowChanging(this, new _caseRowChangeEvent(((_caseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._caseRowDeleted != null)) {
                    this._caseRowDeleted(this, new _caseRowChangeEvent(((_caseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._caseRowDeleting != null)) {
                    this._caseRowDeleting(this, new _caseRowChangeEvent(((_caseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_caseRow(_caseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_caseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class profileDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnprofile_Id;
            
            private global::System.Data.DataColumn columncase_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public profileDataTable() {
                this.TableName = "profile";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal profileDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected profileDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn profile_IdColumn {
                get {
                    return this.columnprofile_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn case_IdColumn {
                get {
                    return this.columncase_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public profileRow this[int index] {
                get {
                    return ((profileRow)(this.Rows[index]));
                }
            }
            
            public event profileRowChangeEventHandler profileRowChanging;
            
            public event profileRowChangeEventHandler profileRowChanged;
            
            public event profileRowChangeEventHandler profileRowDeleting;
            
            public event profileRowChangeEventHandler profileRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddprofileRow(profileRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public profileRow AddprofileRow(_caseRow parent_caseRowBycase_profile) {
                profileRow rowprofileRow = ((profileRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parent_caseRowBycase_profile != null)) {
                    columnValuesArray[1] = parent_caseRowBycase_profile[7];
                }
                rowprofileRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowprofileRow);
                return rowprofileRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                profileDataTable cln = ((profileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new profileDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprofile_Id = base.Columns["profile_Id"];
                this.columncase_Id = base.Columns["case_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprofile_Id = new global::System.Data.DataColumn("profile_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprofile_Id);
                this.columncase_Id = new global::System.Data.DataColumn("case_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncase_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnprofile_Id}, true));
                this.columnprofile_Id.AutoIncrement = true;
                this.columnprofile_Id.AllowDBNull = false;
                this.columnprofile_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public profileRow NewprofileRow() {
                return ((profileRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new profileRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(profileRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.profileRowChanged != null)) {
                    this.profileRowChanged(this, new profileRowChangeEvent(((profileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.profileRowChanging != null)) {
                    this.profileRowChanging(this, new profileRowChangeEvent(((profileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.profileRowDeleted != null)) {
                    this.profileRowDeleted(this, new profileRowChangeEvent(((profileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.profileRowDeleting != null)) {
                    this.profileRowDeleting(this, new profileRowChangeEvent(((profileRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveprofileRow(profileRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "profileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class personDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnaddr;
            
            private global::System.Data.DataColumn columnremark;
            
            private global::System.Data.DataColumn columnallergy;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnforeigner;
            
            private global::System.Data.DataColumn columnsex;
            
            private global::System.Data.DataColumn columnbirth;
            
            private global::System.Data.DataColumn columnbirth_order;
            
            private global::System.Data.DataColumn columnphone;
            
            private global::System.Data.DataColumn columnfamily;
            
            private global::System.Data.DataColumn columnmobile;
            
            private global::System.Data.DataColumn columnemail;
            
            private global::System.Data.DataColumn columnblood;
            
            private global::System.Data.DataColumn columnblood_rh;
            
            private global::System.Data.DataColumn columnprofile_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personDataTable() {
                this.TableName = "person";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal personDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected personDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn addrColumn {
                get {
                    return this.columnaddr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn remarkColumn {
                get {
                    return this.columnremark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn allergyColumn {
                get {
                    return this.columnallergy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn foreignerColumn {
                get {
                    return this.columnforeigner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sexColumn {
                get {
                    return this.columnsex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn birthColumn {
                get {
                    return this.columnbirth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn birth_orderColumn {
                get {
                    return this.columnbirth_order;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phoneColumn {
                get {
                    return this.columnphone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn familyColumn {
                get {
                    return this.columnfamily;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mobileColumn {
                get {
                    return this.columnmobile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bloodColumn {
                get {
                    return this.columnblood;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn blood_rhColumn {
                get {
                    return this.columnblood_rh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn profile_IdColumn {
                get {
                    return this.columnprofile_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow this[int index] {
                get {
                    return ((personRow)(this.Rows[index]));
                }
            }
            
            public event personRowChangeEventHandler personRowChanging;
            
            public event personRowChangeEventHandler personRowChanged;
            
            public event personRowChangeEventHandler personRowDeleting;
            
            public event personRowChangeEventHandler personRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpersonRow(personRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow AddpersonRow(
                        string addr, 
                        string remark, 
                        string allergy, 
                        string name, 
                        string type, 
                        string id, 
                        string foreigner, 
                        string sex, 
                        string birth, 
                        string birth_order, 
                        string phone, 
                        string family, 
                        string mobile, 
                        string email, 
                        string blood, 
                        string blood_rh, 
                        profileRow parentprofileRowByprofile_person) {
                personRow rowpersonRow = ((personRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        addr,
                        remark,
                        allergy,
                        name,
                        type,
                        id,
                        foreigner,
                        sex,
                        birth,
                        birth_order,
                        phone,
                        family,
                        mobile,
                        email,
                        blood,
                        blood_rh,
                        null};
                if ((parentprofileRowByprofile_person != null)) {
                    columnValuesArray[16] = parentprofileRowByprofile_person[0];
                }
                rowpersonRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpersonRow);
                return rowpersonRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                personDataTable cln = ((personDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new personDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaddr = base.Columns["addr"];
                this.columnremark = base.Columns["remark"];
                this.columnallergy = base.Columns["allergy"];
                this.columnname = base.Columns["name"];
                this.columntype = base.Columns["type"];
                this.columnid = base.Columns["id"];
                this.columnforeigner = base.Columns["foreigner"];
                this.columnsex = base.Columns["sex"];
                this.columnbirth = base.Columns["birth"];
                this.columnbirth_order = base.Columns["birth_order"];
                this.columnphone = base.Columns["phone"];
                this.columnfamily = base.Columns["family"];
                this.columnmobile = base.Columns["mobile"];
                this.columnemail = base.Columns["email"];
                this.columnblood = base.Columns["blood"];
                this.columnblood_rh = base.Columns["blood_rh"];
                this.columnprofile_Id = base.Columns["profile_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaddr = new global::System.Data.DataColumn("addr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaddr);
                this.columnremark = new global::System.Data.DataColumn("remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnremark);
                this.columnallergy = new global::System.Data.DataColumn("allergy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnallergy);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnforeigner = new global::System.Data.DataColumn("foreigner", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnforeigner);
                this.columnsex = new global::System.Data.DataColumn("sex", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsex);
                this.columnbirth = new global::System.Data.DataColumn("birth", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnbirth);
                this.columnbirth_order = new global::System.Data.DataColumn("birth_order", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnbirth_order);
                this.columnphone = new global::System.Data.DataColumn("phone", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnphone);
                this.columnfamily = new global::System.Data.DataColumn("family", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnfamily);
                this.columnmobile = new global::System.Data.DataColumn("mobile", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmobile);
                this.columnemail = new global::System.Data.DataColumn("email", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnemail);
                this.columnblood = new global::System.Data.DataColumn("blood", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnblood);
                this.columnblood_rh = new global::System.Data.DataColumn("blood_rh", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnblood_rh);
                this.columnprofile_Id = new global::System.Data.DataColumn("profile_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprofile_Id);
                this.columnname.Namespace = "";
                this.columntype.Namespace = "";
                this.columnid.Namespace = "";
                this.columnforeigner.Namespace = "";
                this.columnsex.Namespace = "";
                this.columnbirth.Namespace = "";
                this.columnbirth_order.Namespace = "";
                this.columnphone.Namespace = "";
                this.columnfamily.Namespace = "";
                this.columnmobile.Namespace = "";
                this.columnemail.Namespace = "";
                this.columnblood.Namespace = "";
                this.columnblood_rh.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow NewpersonRow() {
                return ((personRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new personRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(personRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.personRowChanged != null)) {
                    this.personRowChanged(this, new personRowChangeEvent(((personRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.personRowChanging != null)) {
                    this.personRowChanging(this, new personRowChangeEvent(((personRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.personRowDeleted != null)) {
                    this.personRowDeleted(this, new personRowChangeEvent(((personRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.personRowDeleting != null)) {
                    this.personRowDeleting(this, new personRowChangeEvent(((personRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepersonRow(personRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "personDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class insuranceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columninsurance_type;
            
            private global::System.Data.DataColumn columnserial_code;
            
            private global::System.Data.DataColumn columnexcept_code;
            
            private global::System.Data.DataColumn columncopayment_code;
            
            private global::System.Data.DataColumn columncase_type;
            
            private global::System.Data.DataColumn columnpay_type;
            
            private global::System.Data.DataColumn columnldistp_type;
            
            private global::System.Data.DataColumn columnrelease_type;
            
            private global::System.Data.DataColumn columncase_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public insuranceDataTable() {
                this.TableName = "insurance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal insuranceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected insuranceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn insurance_typeColumn {
                get {
                    return this.columninsurance_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn serial_codeColumn {
                get {
                    return this.columnserial_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn except_codeColumn {
                get {
                    return this.columnexcept_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn copayment_codeColumn {
                get {
                    return this.columncopayment_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn case_typeColumn {
                get {
                    return this.columncase_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pay_typeColumn {
                get {
                    return this.columnpay_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ldistp_typeColumn {
                get {
                    return this.columnldistp_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn release_typeColumn {
                get {
                    return this.columnrelease_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn case_IdColumn {
                get {
                    return this.columncase_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public insuranceRow this[int index] {
                get {
                    return ((insuranceRow)(this.Rows[index]));
                }
            }
            
            public event insuranceRowChangeEventHandler insuranceRowChanging;
            
            public event insuranceRowChangeEventHandler insuranceRowChanged;
            
            public event insuranceRowChangeEventHandler insuranceRowDeleting;
            
            public event insuranceRowChangeEventHandler insuranceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddinsuranceRow(insuranceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public insuranceRow AddinsuranceRow(string insurance_type, string serial_code, string except_code, string copayment_code, string case_type, string pay_type, string ldistp_type, string release_type, _caseRow parent_caseRowBycase_insurance) {
                insuranceRow rowinsuranceRow = ((insuranceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        insurance_type,
                        serial_code,
                        except_code,
                        copayment_code,
                        case_type,
                        pay_type,
                        ldistp_type,
                        release_type,
                        null};
                if ((parent_caseRowBycase_insurance != null)) {
                    columnValuesArray[8] = parent_caseRowBycase_insurance[7];
                }
                rowinsuranceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowinsuranceRow);
                return rowinsuranceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                insuranceDataTable cln = ((insuranceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new insuranceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninsurance_type = base.Columns["insurance_type"];
                this.columnserial_code = base.Columns["serial_code"];
                this.columnexcept_code = base.Columns["except_code"];
                this.columncopayment_code = base.Columns["copayment_code"];
                this.columncase_type = base.Columns["case_type"];
                this.columnpay_type = base.Columns["pay_type"];
                this.columnldistp_type = base.Columns["ldistp_type"];
                this.columnrelease_type = base.Columns["release_type"];
                this.columncase_Id = base.Columns["case_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninsurance_type = new global::System.Data.DataColumn("insurance_type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columninsurance_type);
                this.columnserial_code = new global::System.Data.DataColumn("serial_code", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnserial_code);
                this.columnexcept_code = new global::System.Data.DataColumn("except_code", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnexcept_code);
                this.columncopayment_code = new global::System.Data.DataColumn("copayment_code", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncopayment_code);
                this.columncase_type = new global::System.Data.DataColumn("case_type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncase_type);
                this.columnpay_type = new global::System.Data.DataColumn("pay_type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnpay_type);
                this.columnldistp_type = new global::System.Data.DataColumn("ldistp_type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnldistp_type);
                this.columnrelease_type = new global::System.Data.DataColumn("release_type", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnrelease_type);
                this.columncase_Id = new global::System.Data.DataColumn("case_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncase_Id);
                this.columninsurance_type.Namespace = "";
                this.columnserial_code.Namespace = "";
                this.columnexcept_code.Namespace = "";
                this.columncopayment_code.Namespace = "";
                this.columncase_type.Namespace = "";
                this.columnpay_type.Namespace = "";
                this.columnldistp_type.Namespace = "";
                this.columnrelease_type.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public insuranceRow NewinsuranceRow() {
                return ((insuranceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new insuranceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(insuranceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.insuranceRowChanged != null)) {
                    this.insuranceRowChanged(this, new insuranceRowChangeEvent(((insuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.insuranceRowChanging != null)) {
                    this.insuranceRowChanging(this, new insuranceRowChangeEvent(((insuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.insuranceRowDeleted != null)) {
                    this.insuranceRowDeleted(this, new insuranceRowChangeEvent(((insuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.insuranceRowDeleting != null)) {
                    this.insuranceRowDeleting(this, new insuranceRowChangeEvent(((insuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveinsuranceRow(insuranceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "insuranceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class studyDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columndoctor_id;
            
            private global::System.Data.DataColumn columntreatments;
            
            private global::System.Data.DataColumn columnchief_complain;
            
            private global::System.Data.DataColumn columnphysical_examination;
            
            private global::System.Data.DataColumn columnsubject;
            
            private global::System.Data.DataColumn columnstudy_Id;
            
            private global::System.Data.DataColumn columncase_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public studyDataTable() {
                this.TableName = "study";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal studyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected studyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn doctor_idColumn {
                get {
                    return this.columndoctor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn treatmentsColumn {
                get {
                    return this.columntreatments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chief_complainColumn {
                get {
                    return this.columnchief_complain;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn physical_examinationColumn {
                get {
                    return this.columnphysical_examination;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subjectColumn {
                get {
                    return this.columnsubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn study_IdColumn {
                get {
                    return this.columnstudy_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn case_IdColumn {
                get {
                    return this.columncase_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public studyRow this[int index] {
                get {
                    return ((studyRow)(this.Rows[index]));
                }
            }
            
            public event studyRowChangeEventHandler studyRowChanging;
            
            public event studyRowChangeEventHandler studyRowChanged;
            
            public event studyRowChangeEventHandler studyRowDeleting;
            
            public event studyRowChangeEventHandler studyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddstudyRow(studyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public studyRow AddstudyRow(string doctor_id, string treatments, string chief_complain, string physical_examination, string subject, _caseRow parent_caseRowBycase_study) {
                studyRow rowstudyRow = ((studyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        doctor_id,
                        treatments,
                        chief_complain,
                        physical_examination,
                        subject,
                        null,
                        null};
                if ((parent_caseRowBycase_study != null)) {
                    columnValuesArray[6] = parent_caseRowBycase_study[7];
                }
                rowstudyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowstudyRow);
                return rowstudyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                studyDataTable cln = ((studyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new studyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndoctor_id = base.Columns["doctor_id"];
                this.columntreatments = base.Columns["treatments"];
                this.columnchief_complain = base.Columns["chief_complain"];
                this.columnphysical_examination = base.Columns["physical_examination"];
                this.columnsubject = base.Columns["subject"];
                this.columnstudy_Id = base.Columns["study_Id"];
                this.columncase_Id = base.Columns["case_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndoctor_id = new global::System.Data.DataColumn("doctor_id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndoctor_id);
                this.columntreatments = new global::System.Data.DataColumn("treatments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntreatments);
                this.columnchief_complain = new global::System.Data.DataColumn("chief_complain", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchief_complain);
                this.columnphysical_examination = new global::System.Data.DataColumn("physical_examination", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnphysical_examination);
                this.columnsubject = new global::System.Data.DataColumn("subject", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsubject);
                this.columnstudy_Id = new global::System.Data.DataColumn("study_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstudy_Id);
                this.columncase_Id = new global::System.Data.DataColumn("case_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncase_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnstudy_Id}, true));
                this.columndoctor_id.Namespace = "";
                this.columnsubject.Namespace = "";
                this.columnstudy_Id.AutoIncrement = true;
                this.columnstudy_Id.AllowDBNull = false;
                this.columnstudy_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public studyRow NewstudyRow() {
                return ((studyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new studyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(studyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.studyRowChanged != null)) {
                    this.studyRowChanged(this, new studyRowChangeEvent(((studyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.studyRowChanging != null)) {
                    this.studyRowChanging(this, new studyRowChangeEvent(((studyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.studyRowDeleted != null)) {
                    this.studyRowDeleted(this, new studyRowChangeEvent(((studyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.studyRowDeleting != null)) {
                    this.studyRowDeleting(this, new studyRowChangeEvent(((studyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovestudyRow(studyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "studyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class diseasesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columndiseases_Id;
            
            private global::System.Data.DataColumn columnstudy_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public diseasesDataTable() {
                this.TableName = "diseases";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal diseasesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected diseasesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diseases_IdColumn {
                get {
                    return this.columndiseases_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn study_IdColumn {
                get {
                    return this.columnstudy_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public diseasesRow this[int index] {
                get {
                    return ((diseasesRow)(this.Rows[index]));
                }
            }
            
            public event diseasesRowChangeEventHandler diseasesRowChanging;
            
            public event diseasesRowChangeEventHandler diseasesRowChanged;
            
            public event diseasesRowChangeEventHandler diseasesRowDeleting;
            
            public event diseasesRowChangeEventHandler diseasesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddiseasesRow(diseasesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public diseasesRow AdddiseasesRow(studyRow parentstudyRowBystudy_diseases) {
                diseasesRow rowdiseasesRow = ((diseasesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentstudyRowBystudy_diseases != null)) {
                    columnValuesArray[1] = parentstudyRowBystudy_diseases[5];
                }
                rowdiseasesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdiseasesRow);
                return rowdiseasesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                diseasesDataTable cln = ((diseasesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new diseasesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndiseases_Id = base.Columns["diseases_Id"];
                this.columnstudy_Id = base.Columns["study_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndiseases_Id = new global::System.Data.DataColumn("diseases_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndiseases_Id);
                this.columnstudy_Id = new global::System.Data.DataColumn("study_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnstudy_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndiseases_Id}, true));
                this.columndiseases_Id.AutoIncrement = true;
                this.columndiseases_Id.AllowDBNull = false;
                this.columndiseases_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public diseasesRow NewdiseasesRow() {
                return ((diseasesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new diseasesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(diseasesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.diseasesRowChanged != null)) {
                    this.diseasesRowChanged(this, new diseasesRowChangeEvent(((diseasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.diseasesRowChanging != null)) {
                    this.diseasesRowChanging(this, new diseasesRowChangeEvent(((diseasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.diseasesRowDeleted != null)) {
                    this.diseasesRowDeleted(this, new diseasesRowChangeEvent(((diseasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.diseasesRowDeleting != null)) {
                    this.diseasesRowDeleting(this, new diseasesRowChangeEvent(((diseasesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovediseasesRow(diseasesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "diseasesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class continous_prescriptionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnstart_at;
            
            private global::System.Data.DataColumn columncount;
            
            private global::System.Data.DataColumn columntotal;
            
            private global::System.Data.DataColumn columnother_mo;
            
            private global::System.Data.DataColumn columncase_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public continous_prescriptionDataTable() {
                this.TableName = "continous_prescription";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal continous_prescriptionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected continous_prescriptionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn start_atColumn {
                get {
                    return this.columnstart_at;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn countColumn {
                get {
                    return this.columncount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totalColumn {
                get {
                    return this.columntotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn other_moColumn {
                get {
                    return this.columnother_mo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn case_IdColumn {
                get {
                    return this.columncase_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public continous_prescriptionRow this[int index] {
                get {
                    return ((continous_prescriptionRow)(this.Rows[index]));
                }
            }
            
            public event continous_prescriptionRowChangeEventHandler continous_prescriptionRowChanging;
            
            public event continous_prescriptionRowChangeEventHandler continous_prescriptionRowChanged;
            
            public event continous_prescriptionRowChangeEventHandler continous_prescriptionRowDeleting;
            
            public event continous_prescriptionRowChangeEventHandler continous_prescriptionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addcontinous_prescriptionRow(continous_prescriptionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public continous_prescriptionRow Addcontinous_prescriptionRow(string start_at, string count, string total, string other_mo, _caseRow parent_caseRowBycase_continous_prescription) {
                continous_prescriptionRow rowcontinous_prescriptionRow = ((continous_prescriptionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        start_at,
                        count,
                        total,
                        other_mo,
                        null};
                if ((parent_caseRowBycase_continous_prescription != null)) {
                    columnValuesArray[4] = parent_caseRowBycase_continous_prescription[7];
                }
                rowcontinous_prescriptionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcontinous_prescriptionRow);
                return rowcontinous_prescriptionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                continous_prescriptionDataTable cln = ((continous_prescriptionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new continous_prescriptionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstart_at = base.Columns["start_at"];
                this.columncount = base.Columns["count"];
                this.columntotal = base.Columns["total"];
                this.columnother_mo = base.Columns["other_mo"];
                this.columncase_Id = base.Columns["case_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstart_at = new global::System.Data.DataColumn("start_at", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnstart_at);
                this.columncount = new global::System.Data.DataColumn("count", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncount);
                this.columntotal = new global::System.Data.DataColumn("total", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntotal);
                this.columnother_mo = new global::System.Data.DataColumn("other_mo", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnother_mo);
                this.columncase_Id = new global::System.Data.DataColumn("case_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncase_Id);
                this.columnstart_at.Namespace = "";
                this.columncount.Namespace = "";
                this.columntotal.Namespace = "";
                this.columnother_mo.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public continous_prescriptionRow Newcontinous_prescriptionRow() {
                return ((continous_prescriptionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new continous_prescriptionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(continous_prescriptionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.continous_prescriptionRowChanged != null)) {
                    this.continous_prescriptionRowChanged(this, new continous_prescriptionRowChangeEvent(((continous_prescriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.continous_prescriptionRowChanging != null)) {
                    this.continous_prescriptionRowChanging(this, new continous_prescriptionRowChangeEvent(((continous_prescriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.continous_prescriptionRowDeleted != null)) {
                    this.continous_prescriptionRowDeleted(this, new continous_prescriptionRowChangeEvent(((continous_prescriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.continous_prescriptionRowDeleting != null)) {
                    this.continous_prescriptionRowDeleting(this, new continous_prescriptionRowChangeEvent(((continous_prescriptionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removecontinous_prescriptionRow(continous_prescriptionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "continous_prescriptionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ordersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columndays;
            
            private global::System.Data.DataColumn columnmill;
            
            private global::System.Data.DataColumn columndosage_method;
            
            private global::System.Data.DataColumn columnorders_Id;
            
            private global::System.Data.DataColumn columncase_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ordersDataTable() {
                this.TableName = "orders";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ordersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ordersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn daysColumn {
                get {
                    return this.columndays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn millColumn {
                get {
                    return this.columnmill;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dosage_methodColumn {
                get {
                    return this.columndosage_method;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn orders_IdColumn {
                get {
                    return this.columnorders_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn case_IdColumn {
                get {
                    return this.columncase_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ordersRow this[int index] {
                get {
                    return ((ordersRow)(this.Rows[index]));
                }
            }
            
            public event ordersRowChangeEventHandler ordersRowChanging;
            
            public event ordersRowChangeEventHandler ordersRowChanged;
            
            public event ordersRowChangeEventHandler ordersRowDeleting;
            
            public event ordersRowChangeEventHandler ordersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddordersRow(ordersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ordersRow AddordersRow(string days, string mill, string dosage_method, _caseRow parent_caseRowBycase_orders) {
                ordersRow rowordersRow = ((ordersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        days,
                        mill,
                        dosage_method,
                        null,
                        null};
                if ((parent_caseRowBycase_orders != null)) {
                    columnValuesArray[4] = parent_caseRowBycase_orders[7];
                }
                rowordersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowordersRow);
                return rowordersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ordersDataTable cln = ((ordersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ordersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndays = base.Columns["days"];
                this.columnmill = base.Columns["mill"];
                this.columndosage_method = base.Columns["dosage_method"];
                this.columnorders_Id = base.Columns["orders_Id"];
                this.columncase_Id = base.Columns["case_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndays = new global::System.Data.DataColumn("days", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndays);
                this.columnmill = new global::System.Data.DataColumn("mill", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnmill);
                this.columndosage_method = new global::System.Data.DataColumn("dosage_method", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndosage_method);
                this.columnorders_Id = new global::System.Data.DataColumn("orders_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnorders_Id);
                this.columncase_Id = new global::System.Data.DataColumn("case_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncase_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnorders_Id}, true));
                this.columndays.Namespace = "";
                this.columnmill.Namespace = "";
                this.columndosage_method.Namespace = "";
                this.columnorders_Id.AutoIncrement = true;
                this.columnorders_Id.AllowDBNull = false;
                this.columnorders_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ordersRow NewordersRow() {
                return ((ordersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ordersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ordersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ordersRowChanged != null)) {
                    this.ordersRowChanged(this, new ordersRowChangeEvent(((ordersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ordersRowChanging != null)) {
                    this.ordersRowChanging(this, new ordersRowChangeEvent(((ordersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ordersRowDeleted != null)) {
                    this.ordersRowDeleted(this, new ordersRowChangeEvent(((ordersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ordersRowDeleting != null)) {
                    this.ordersRowDeleting(this, new ordersRowChangeEvent(((ordersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveordersRow(ordersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ordersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class itemRow : global::System.Data.DataRow {
            
            private itemDataTable tableitem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal itemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableitem = ((itemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string code {
                get {
                    try {
                        return ((string)(this[this.tableitem.codeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'code\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableitem.typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'type\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string desc {
                get {
                    try {
                        return ((string)(this[this.tableitem.descColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'desc\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.descColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string remark {
                get {
                    try {
                        return ((string)(this[this.tableitem.remarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'remark\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.remarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string local_code {
                get {
                    try {
                        return ((string)(this[this.tableitem.local_codeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'local_code\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.local_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tableitem.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string divided_dose {
                get {
                    try {
                        return ((string)(this[this.tableitem.divided_doseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'divided_dose\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.divided_doseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string daily_dose {
                get {
                    try {
                        return ((string)(this[this.tableitem.daily_doseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'daily_dose\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.daily_doseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string total_dose {
                get {
                    try {
                        return ((string)(this[this.tableitem.total_doseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'total_dose\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.total_doseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string freq {
                get {
                    try {
                        return ((string)(this[this.tableitem.freqColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'freq\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.freqColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string days {
                get {
                    try {
                        return ((string)(this[this.tableitem.daysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'days\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.daysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string way {
                get {
                    try {
                        return ((string)(this[this.tableitem.wayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'way\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.wayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string price {
                get {
                    try {
                        return ((string)(this[this.tableitem.priceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'price\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.priceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string multiplier {
                get {
                    try {
                        return ((string)(this[this.tableitem.multiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'multiplier\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.multiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memo {
                get {
                    try {
                        return ((string)(this[this.tableitem.memoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'memo\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.memoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dum {
                get {
                    try {
                        return ((string)(this[this.tableitem.dumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'dum\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.dumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dnop {
                get {
                    try {
                        return ((string)(this[this.tableitem.dnopColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'dnop\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.dnopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dtp1 {
                get {
                    try {
                        return ((string)(this[this.tableitem.dtp1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'dtp1\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.dtp1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int diseases_Id {
                get {
                    try {
                        return ((int)(this[this.tableitem.diseases_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'diseases_Id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.diseases_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int orders_Id {
                get {
                    try {
                        return ((int)(this[this.tableitem.orders_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'item\' 中資料行 \'orders_Id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableitem.orders_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public diseasesRow diseasesRow {
                get {
                    return ((diseasesRow)(this.GetParentRow(this.Table.ParentRelations["diseases_item"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["diseases_item"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ordersRow ordersRow {
                get {
                    return ((ordersRow)(this.GetParentRow(this.Table.ParentRelations["orders_item"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["orders_item"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscodeNull() {
                return this.IsNull(this.tableitem.codeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcodeNull() {
                this[this.tableitem.codeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tableitem.typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tableitem.typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescNull() {
                return this.IsNull(this.tableitem.descColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescNull() {
                this[this.tableitem.descColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsremarkNull() {
                return this.IsNull(this.tableitem.remarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetremarkNull() {
                this[this.tableitem.remarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islocal_codeNull() {
                return this.IsNull(this.tableitem.local_codeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlocal_codeNull() {
                this[this.tableitem.local_codeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableitem.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableitem.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdivided_doseNull() {
                return this.IsNull(this.tableitem.divided_doseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdivided_doseNull() {
                this[this.tableitem.divided_doseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdaily_doseNull() {
                return this.IsNull(this.tableitem.daily_doseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdaily_doseNull() {
                this[this.tableitem.daily_doseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istotal_doseNull() {
                return this.IsNull(this.tableitem.total_doseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settotal_doseNull() {
                this[this.tableitem.total_doseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfreqNull() {
                return this.IsNull(this.tableitem.freqColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfreqNull() {
                this[this.tableitem.freqColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdaysNull() {
                return this.IsNull(this.tableitem.daysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdaysNull() {
                this[this.tableitem.daysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IswayNull() {
                return this.IsNull(this.tableitem.wayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetwayNull() {
                this[this.tableitem.wayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspriceNull() {
                return this.IsNull(this.tableitem.priceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpriceNull() {
                this[this.tableitem.priceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmultiplierNull() {
                return this.IsNull(this.tableitem.multiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmultiplierNull() {
                this[this.tableitem.multiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemoNull() {
                return this.IsNull(this.tableitem.memoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemoNull() {
                this[this.tableitem.memoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdumNull() {
                return this.IsNull(this.tableitem.dumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdumNull() {
                this[this.tableitem.dumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdnopNull() {
                return this.IsNull(this.tableitem.dnopColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdnopNull() {
                this[this.tableitem.dnopColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdtp1Null() {
                return this.IsNull(this.tableitem.dtp1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdtp1Null() {
                this[this.tableitem.dtp1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdiseases_IdNull() {
                return this.IsNull(this.tableitem.diseases_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdiseases_IdNull() {
                this[this.tableitem.diseases_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isorders_IdNull() {
                return this.IsNull(this.tableitem.orders_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setorders_IdNull() {
                this[this.tableitem.orders_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _caseRow : global::System.Data.DataRow {
            
            private _caseDataTable table_case;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _caseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_case = ((_caseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string from {
                get {
                    try {
                        return ((string)(this[this.table_case.fromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'case\' 中資料行 \'from\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.table_case.fromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string to {
                get {
                    try {
                        return ((string)(this[this.table_case.toColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'case\' 中資料行 \'to\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.table_case.toColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string local_id {
                get {
                    try {
                        return ((string)(this[this.table_case.local_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'case\' 中資料行 \'local_id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.table_case.local_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date {
                get {
                    try {
                        return ((string)(this[this.table_case.dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'case\' 中資料行 \'date\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.table_case.dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string time {
                get {
                    try {
                        return ((string)(this[this.table_case.timeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'case\' 中資料行 \'time\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.table_case.timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string app {
                get {
                    try {
                        return ((string)(this[this.table_case.appColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'case\' 中資料行 \'app\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.table_case.appColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string request_method {
                get {
                    try {
                        return ((string)(this[this.table_case.request_methodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'case\' 中資料行 \'request_method\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.table_case.request_methodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int case_Id {
                get {
                    return ((int)(this[this.table_case.case_IdColumn]));
                }
                set {
                    this[this.table_case.case_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfromNull() {
                return this.IsNull(this.table_case.fromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfromNull() {
                this[this.table_case.fromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstoNull() {
                return this.IsNull(this.table_case.toColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettoNull() {
                this[this.table_case.toColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islocal_idNull() {
                return this.IsNull(this.table_case.local_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlocal_idNull() {
                this[this.table_case.local_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateNull() {
                return this.IsNull(this.table_case.dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateNull() {
                this[this.table_case.dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeNull() {
                return this.IsNull(this.table_case.timeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeNull() {
                this[this.table_case.timeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsappNull() {
                return this.IsNull(this.table_case.appColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetappNull() {
                this[this.table_case.appColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrequest_methodNull() {
                return this.IsNull(this.table_case.request_methodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrequest_methodNull() {
                this[this.table_case.request_methodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public profileRow[] GetprofileRows() {
                if ((this.Table.ChildRelations["case_profile"] == null)) {
                    return new profileRow[0];
                }
                else {
                    return ((profileRow[])(base.GetChildRows(this.Table.ChildRelations["case_profile"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public insuranceRow[] GetinsuranceRows() {
                if ((this.Table.ChildRelations["case_insurance"] == null)) {
                    return new insuranceRow[0];
                }
                else {
                    return ((insuranceRow[])(base.GetChildRows(this.Table.ChildRelations["case_insurance"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public studyRow[] GetstudyRows() {
                if ((this.Table.ChildRelations["case_study"] == null)) {
                    return new studyRow[0];
                }
                else {
                    return ((studyRow[])(base.GetChildRows(this.Table.ChildRelations["case_study"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public continous_prescriptionRow[] Getcontinous_prescriptionRows() {
                if ((this.Table.ChildRelations["case_continous_prescription"] == null)) {
                    return new continous_prescriptionRow[0];
                }
                else {
                    return ((continous_prescriptionRow[])(base.GetChildRows(this.Table.ChildRelations["case_continous_prescription"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ordersRow[] GetordersRows() {
                if ((this.Table.ChildRelations["case_orders"] == null)) {
                    return new ordersRow[0];
                }
                else {
                    return ((ordersRow[])(base.GetChildRows(this.Table.ChildRelations["case_orders"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class profileRow : global::System.Data.DataRow {
            
            private profileDataTable tableprofile;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal profileRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableprofile = ((profileDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int profile_Id {
                get {
                    return ((int)(this[this.tableprofile.profile_IdColumn]));
                }
                set {
                    this[this.tableprofile.profile_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int case_Id {
                get {
                    try {
                        return ((int)(this[this.tableprofile.case_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'profile\' 中資料行 \'case_Id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableprofile.case_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _caseRow caseRow {
                get {
                    return ((_caseRow)(this.GetParentRow(this.Table.ParentRelations["case_profile"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["case_profile"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscase_IdNull() {
                return this.IsNull(this.tableprofile.case_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcase_IdNull() {
                this[this.tableprofile.case_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow[] GetpersonRows() {
                if ((this.Table.ChildRelations["profile_person"] == null)) {
                    return new personRow[0];
                }
                else {
                    return ((personRow[])(base.GetChildRows(this.Table.ChildRelations["profile_person"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class personRow : global::System.Data.DataRow {
            
            private personDataTable tableperson;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal personRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableperson = ((personDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string addr {
                get {
                    try {
                        return ((string)(this[this.tableperson.addrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'addr\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.addrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string remark {
                get {
                    try {
                        return ((string)(this[this.tableperson.remarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'remark\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.remarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string allergy {
                get {
                    try {
                        return ((string)(this[this.tableperson.allergyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'allergy\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.allergyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableperson.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'name\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableperson.typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'type\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tableperson.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string foreigner {
                get {
                    try {
                        return ((string)(this[this.tableperson.foreignerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'foreigner\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.foreignerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sex {
                get {
                    try {
                        return ((string)(this[this.tableperson.sexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'sex\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.sexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string birth {
                get {
                    try {
                        return ((string)(this[this.tableperson.birthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'birth\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.birthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string birth_order {
                get {
                    try {
                        return ((string)(this[this.tableperson.birth_orderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'birth_order\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.birth_orderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string phone {
                get {
                    try {
                        return ((string)(this[this.tableperson.phoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'phone\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.phoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string family {
                get {
                    try {
                        return ((string)(this[this.tableperson.familyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'family\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.familyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mobile {
                get {
                    try {
                        return ((string)(this[this.tableperson.mobileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'mobile\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.mobileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableperson.emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'email\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string blood {
                get {
                    try {
                        return ((string)(this[this.tableperson.bloodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'blood\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.bloodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string blood_rh {
                get {
                    try {
                        return ((string)(this[this.tableperson.blood_rhColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'blood_rh\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.blood_rhColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int profile_Id {
                get {
                    try {
                        return ((int)(this[this.tableperson.profile_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'person\' 中資料行 \'profile_Id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableperson.profile_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public profileRow profileRow {
                get {
                    return ((profileRow)(this.GetParentRow(this.Table.ParentRelations["profile_person"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["profile_person"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaddrNull() {
                return this.IsNull(this.tableperson.addrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaddrNull() {
                this[this.tableperson.addrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsremarkNull() {
                return this.IsNull(this.tableperson.remarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetremarkNull() {
                this[this.tableperson.remarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsallergyNull() {
                return this.IsNull(this.tableperson.allergyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetallergyNull() {
                this[this.tableperson.allergyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableperson.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableperson.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tableperson.typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tableperson.typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableperson.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableperson.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsforeignerNull() {
                return this.IsNull(this.tableperson.foreignerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetforeignerNull() {
                this[this.tableperson.foreignerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssexNull() {
                return this.IsNull(this.tableperson.sexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsexNull() {
                this[this.tableperson.sexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbirthNull() {
                return this.IsNull(this.tableperson.birthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbirthNull() {
                this[this.tableperson.birthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbirth_orderNull() {
                return this.IsNull(this.tableperson.birth_orderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbirth_orderNull() {
                this[this.tableperson.birth_orderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsphoneNull() {
                return this.IsNull(this.tableperson.phoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetphoneNull() {
                this[this.tableperson.phoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfamilyNull() {
                return this.IsNull(this.tableperson.familyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfamilyNull() {
                this[this.tableperson.familyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmobileNull() {
                return this.IsNull(this.tableperson.mobileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmobileNull() {
                this[this.tableperson.mobileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemailNull() {
                return this.IsNull(this.tableperson.emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemailNull() {
                this[this.tableperson.emailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbloodNull() {
                return this.IsNull(this.tableperson.bloodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbloodNull() {
                this[this.tableperson.bloodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isblood_rhNull() {
                return this.IsNull(this.tableperson.blood_rhColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setblood_rhNull() {
                this[this.tableperson.blood_rhColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprofile_IdNull() {
                return this.IsNull(this.tableperson.profile_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprofile_IdNull() {
                this[this.tableperson.profile_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class insuranceRow : global::System.Data.DataRow {
            
            private insuranceDataTable tableinsurance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal insuranceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableinsurance = ((insuranceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string insurance_type {
                get {
                    try {
                        return ((string)(this[this.tableinsurance.insurance_typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'insurance\' 中資料行 \'insurance_type\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableinsurance.insurance_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string serial_code {
                get {
                    try {
                        return ((string)(this[this.tableinsurance.serial_codeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'insurance\' 中資料行 \'serial_code\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableinsurance.serial_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string except_code {
                get {
                    try {
                        return ((string)(this[this.tableinsurance.except_codeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'insurance\' 中資料行 \'except_code\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableinsurance.except_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string copayment_code {
                get {
                    try {
                        return ((string)(this[this.tableinsurance.copayment_codeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'insurance\' 中資料行 \'copayment_code\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableinsurance.copayment_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string case_type {
                get {
                    try {
                        return ((string)(this[this.tableinsurance.case_typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'insurance\' 中資料行 \'case_type\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableinsurance.case_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pay_type {
                get {
                    try {
                        return ((string)(this[this.tableinsurance.pay_typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'insurance\' 中資料行 \'pay_type\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableinsurance.pay_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ldistp_type {
                get {
                    try {
                        return ((string)(this[this.tableinsurance.ldistp_typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'insurance\' 中資料行 \'ldistp_type\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableinsurance.ldistp_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string release_type {
                get {
                    try {
                        return ((string)(this[this.tableinsurance.release_typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'insurance\' 中資料行 \'release_type\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableinsurance.release_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int case_Id {
                get {
                    try {
                        return ((int)(this[this.tableinsurance.case_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'insurance\' 中資料行 \'case_Id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableinsurance.case_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _caseRow caseRow {
                get {
                    return ((_caseRow)(this.GetParentRow(this.Table.ParentRelations["case_insurance"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["case_insurance"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinsurance_typeNull() {
                return this.IsNull(this.tableinsurance.insurance_typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinsurance_typeNull() {
                this[this.tableinsurance.insurance_typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isserial_codeNull() {
                return this.IsNull(this.tableinsurance.serial_codeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setserial_codeNull() {
                this[this.tableinsurance.serial_codeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isexcept_codeNull() {
                return this.IsNull(this.tableinsurance.except_codeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setexcept_codeNull() {
                this[this.tableinsurance.except_codeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscopayment_codeNull() {
                return this.IsNull(this.tableinsurance.copayment_codeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcopayment_codeNull() {
                this[this.tableinsurance.copayment_codeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscase_typeNull() {
                return this.IsNull(this.tableinsurance.case_typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcase_typeNull() {
                this[this.tableinsurance.case_typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispay_typeNull() {
                return this.IsNull(this.tableinsurance.pay_typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpay_typeNull() {
                this[this.tableinsurance.pay_typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isldistp_typeNull() {
                return this.IsNull(this.tableinsurance.ldistp_typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setldistp_typeNull() {
                this[this.tableinsurance.ldistp_typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrelease_typeNull() {
                return this.IsNull(this.tableinsurance.release_typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrelease_typeNull() {
                this[this.tableinsurance.release_typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscase_IdNull() {
                return this.IsNull(this.tableinsurance.case_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcase_IdNull() {
                this[this.tableinsurance.case_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class studyRow : global::System.Data.DataRow {
            
            private studyDataTable tablestudy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal studyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablestudy = ((studyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string doctor_id {
                get {
                    try {
                        return ((string)(this[this.tablestudy.doctor_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'study\' 中資料行 \'doctor_id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestudy.doctor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string treatments {
                get {
                    try {
                        return ((string)(this[this.tablestudy.treatmentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'study\' 中資料行 \'treatments\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestudy.treatmentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string chief_complain {
                get {
                    try {
                        return ((string)(this[this.tablestudy.chief_complainColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'study\' 中資料行 \'chief_complain\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestudy.chief_complainColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string physical_examination {
                get {
                    try {
                        return ((string)(this[this.tablestudy.physical_examinationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'study\' 中資料行 \'physical_examination\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestudy.physical_examinationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string subject {
                get {
                    try {
                        return ((string)(this[this.tablestudy.subjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'study\' 中資料行 \'subject\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestudy.subjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int study_Id {
                get {
                    return ((int)(this[this.tablestudy.study_IdColumn]));
                }
                set {
                    this[this.tablestudy.study_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int case_Id {
                get {
                    try {
                        return ((int)(this[this.tablestudy.case_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'study\' 中資料行 \'case_Id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestudy.case_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _caseRow caseRow {
                get {
                    return ((_caseRow)(this.GetParentRow(this.Table.ParentRelations["case_study"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["case_study"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdoctor_idNull() {
                return this.IsNull(this.tablestudy.doctor_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdoctor_idNull() {
                this[this.tablestudy.doctor_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstreatmentsNull() {
                return this.IsNull(this.tablestudy.treatmentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettreatmentsNull() {
                this[this.tablestudy.treatmentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischief_complainNull() {
                return this.IsNull(this.tablestudy.chief_complainColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setchief_complainNull() {
                this[this.tablestudy.chief_complainColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isphysical_examinationNull() {
                return this.IsNull(this.tablestudy.physical_examinationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setphysical_examinationNull() {
                this[this.tablestudy.physical_examinationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssubjectNull() {
                return this.IsNull(this.tablestudy.subjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsubjectNull() {
                this[this.tablestudy.subjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscase_IdNull() {
                return this.IsNull(this.tablestudy.case_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcase_IdNull() {
                this[this.tablestudy.case_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public diseasesRow[] GetdiseasesRows() {
                if ((this.Table.ChildRelations["study_diseases"] == null)) {
                    return new diseasesRow[0];
                }
                else {
                    return ((diseasesRow[])(base.GetChildRows(this.Table.ChildRelations["study_diseases"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class diseasesRow : global::System.Data.DataRow {
            
            private diseasesDataTable tablediseases;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal diseasesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablediseases = ((diseasesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int diseases_Id {
                get {
                    return ((int)(this[this.tablediseases.diseases_IdColumn]));
                }
                set {
                    this[this.tablediseases.diseases_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int study_Id {
                get {
                    try {
                        return ((int)(this[this.tablediseases.study_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'diseases\' 中資料行 \'study_Id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablediseases.study_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public studyRow studyRow {
                get {
                    return ((studyRow)(this.GetParentRow(this.Table.ParentRelations["study_diseases"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["study_diseases"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstudy_IdNull() {
                return this.IsNull(this.tablediseases.study_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstudy_IdNull() {
                this[this.tablediseases.study_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow[] GetitemRows() {
                if ((this.Table.ChildRelations["diseases_item"] == null)) {
                    return new itemRow[0];
                }
                else {
                    return ((itemRow[])(base.GetChildRows(this.Table.ChildRelations["diseases_item"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class continous_prescriptionRow : global::System.Data.DataRow {
            
            private continous_prescriptionDataTable tablecontinous_prescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal continous_prescriptionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecontinous_prescription = ((continous_prescriptionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string start_at {
                get {
                    try {
                        return ((string)(this[this.tablecontinous_prescription.start_atColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'continous_prescription\' 中資料行 \'start_at\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablecontinous_prescription.start_atColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string count {
                get {
                    try {
                        return ((string)(this[this.tablecontinous_prescription.countColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'continous_prescription\' 中資料行 \'count\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablecontinous_prescription.countColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string total {
                get {
                    try {
                        return ((string)(this[this.tablecontinous_prescription.totalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'continous_prescription\' 中資料行 \'total\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablecontinous_prescription.totalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string other_mo {
                get {
                    try {
                        return ((string)(this[this.tablecontinous_prescription.other_moColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'continous_prescription\' 中資料行 \'other_mo\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablecontinous_prescription.other_moColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int case_Id {
                get {
                    try {
                        return ((int)(this[this.tablecontinous_prescription.case_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'continous_prescription\' 中資料行 \'case_Id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablecontinous_prescription.case_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _caseRow caseRow {
                get {
                    return ((_caseRow)(this.GetParentRow(this.Table.ParentRelations["case_continous_prescription"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["case_continous_prescription"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstart_atNull() {
                return this.IsNull(this.tablecontinous_prescription.start_atColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstart_atNull() {
                this[this.tablecontinous_prescription.start_atColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscountNull() {
                return this.IsNull(this.tablecontinous_prescription.countColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcountNull() {
                this[this.tablecontinous_prescription.countColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotalNull() {
                return this.IsNull(this.tablecontinous_prescription.totalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotalNull() {
                this[this.tablecontinous_prescription.totalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isother_moNull() {
                return this.IsNull(this.tablecontinous_prescription.other_moColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setother_moNull() {
                this[this.tablecontinous_prescription.other_moColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscase_IdNull() {
                return this.IsNull(this.tablecontinous_prescription.case_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcase_IdNull() {
                this[this.tablecontinous_prescription.case_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ordersRow : global::System.Data.DataRow {
            
            private ordersDataTable tableorders;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ordersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableorders = ((ordersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string days {
                get {
                    try {
                        return ((string)(this[this.tableorders.daysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'orders\' 中資料行 \'days\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableorders.daysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mill {
                get {
                    try {
                        return ((string)(this[this.tableorders.millColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'orders\' 中資料行 \'mill\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableorders.millColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dosage_method {
                get {
                    try {
                        return ((string)(this[this.tableorders.dosage_methodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'orders\' 中資料行 \'dosage_method\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableorders.dosage_methodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int orders_Id {
                get {
                    return ((int)(this[this.tableorders.orders_IdColumn]));
                }
                set {
                    this[this.tableorders.orders_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int case_Id {
                get {
                    try {
                        return ((int)(this[this.tableorders.case_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'orders\' 中資料行 \'case_Id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableorders.case_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _caseRow caseRow {
                get {
                    return ((_caseRow)(this.GetParentRow(this.Table.ParentRelations["case_orders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["case_orders"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdaysNull() {
                return this.IsNull(this.tableorders.daysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdaysNull() {
                this[this.tableorders.daysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmillNull() {
                return this.IsNull(this.tableorders.millColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmillNull() {
                this[this.tableorders.millColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdosage_methodNull() {
                return this.IsNull(this.tableorders.dosage_methodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdosage_methodNull() {
                this[this.tableorders.dosage_methodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscase_IdNull() {
                return this.IsNull(this.tableorders.case_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcase_IdNull() {
                this[this.tableorders.case_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow[] GetitemRows() {
                if ((this.Table.ChildRelations["orders_item"] == null)) {
                    return new itemRow[0];
                }
                else {
                    return ((itemRow[])(base.GetChildRows(this.Table.ChildRelations["orders_item"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class itemRowChangeEvent : global::System.EventArgs {
            
            private itemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRowChangeEvent(itemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public itemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _caseRowChangeEvent : global::System.EventArgs {
            
            private _caseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _caseRowChangeEvent(_caseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _caseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class profileRowChangeEvent : global::System.EventArgs {
            
            private profileRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public profileRowChangeEvent(profileRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public profileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class personRowChangeEvent : global::System.EventArgs {
            
            private personRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRowChangeEvent(personRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class insuranceRowChangeEvent : global::System.EventArgs {
            
            private insuranceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public insuranceRowChangeEvent(insuranceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public insuranceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class studyRowChangeEvent : global::System.EventArgs {
            
            private studyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public studyRowChangeEvent(studyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public studyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class diseasesRowChangeEvent : global::System.EventArgs {
            
            private diseasesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public diseasesRowChangeEvent(diseasesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public diseasesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class continous_prescriptionRowChangeEvent : global::System.EventArgs {
            
            private continous_prescriptionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public continous_prescriptionRowChangeEvent(continous_prescriptionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public continous_prescriptionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ordersRowChangeEvent : global::System.EventArgs {
            
            private ordersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ordersRowChangeEvent(ordersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ordersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591